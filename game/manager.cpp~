#include <iostream>
#include <string>
#include <iomanip>
#include "gamedata.h"
#include "manager.h"
#include "time.h"
#include "frameFactory.h"
#include "scaledSprite.h"
#include "projectileManager.h"

Manager::~Manager() {
  // These deletions eliminate "definitely lost" and
  // "still reachable"s in Valgrind.
  for (unsigned i = 0; i < sprites.size(); ++i) {
    delete sprites[i];
  }
  for (unsigned i = 0; i < characters.size(); ++i){
    delete characters[i];
  }
}

Manager::Manager() :
  env( SDL_putenv(const_cast<char*>("SDL_VIDEO_CENTERED=center")) ),
  io( IOManager::getInstance() ),
  clock( Clock::getInstance() ),
  screen( io.getScreen() ),
  world("back", Gamedata::getInstance().getXmlInt("back/factor") ),
  world2("back2", Gamedata::getInstance().getXmlInt("back2/factor")),
  viewport( Viewport::getInstance() ),
  hud( Hud::getInstance() ),
  sprites(),
  currentSprite(0),
  makeVideo( false ),
  frameCount( 0 ),
  username(  Gamedata::getInstance().getXmlStr("username") ),
  title( Gamedata::getInstance().getXmlStr("screenTitle") ),
  frameMax( Gamedata::getInstance().getXmlInt("frameMax") ),
  characters()
{
  if (SDL_Init(SDL_INIT_VIDEO) != 0) {
    throw string("Unable to initialize SDL: ");
  }
  SDL_WM_SetCaption(title.c_str(), NULL);
  atexit(SDL_Quit);
	characters.push_back( new Player("earth", "Earth"));
	characters.push_back( new Player("mercury", "Mercury"));
	characters.push_back( new Player("venus", "Venus"));
	characters.push_back( new Player("mars", "Mars"));

	srand(time(NULL));
	for(int i = 0; i < Gamedata::getInstance().getXmlInt("painters/num"); i++){
		float scale = (Gamedata::getInstance().getXmlInt("painters/minScale") + rand()%Gamedata::getInstance().getXmlInt("painters/maxScale"))*0.1;
		Frame *f = FrameFactory::getInstance().getFrame(Gamedata::getInstance().getXmlStr("painters/object"));
		sprites.push_back(new ScaledSprite(Gamedata::getInstance().getXmlStr("painters/object"),
			f->getSurface(), scale));
	}

  for(int i= 0; i< 5; i++){
    ProjectileManager::getInstance().addToFree(Projectile(1));
  }

  	viewport.setObjectToTrack(characters[currentSprite]);
}

void Manager::draw() const {
  world.draw();
  world2.draw();
  for (unsigned i = 0; i < sprites.size(); ++i) {
    sprites[i]->draw();
  }
  characters[currentSprite]->draw();

  //io.printMessageValueAt("Seconds: ", clock.getSeconds(), 10, 20);
  //io.printMessageAt("Press T to switch sprites", 10, 90);
  //io.printMessageValueAt("Sun x: ",TwoWayMultiSprite::getTrackedX(), 10, 110);
  io.printMessageAt(title, 10, 450);
  hud.draw(clock.getFrameRate(), clock.getSeconds(), characters[currentSprite]->getName());
  viewport.draw();

  SDL_Flip(screen);
}

void Manager::makeFrame() {
  std::stringstream strm;
  strm << "frames/" << username<< '.'
       << std::setfill('0') << std::setw(4)
       << frameCount++ << ".bmp";
  std::string filename( strm.str() );
  std::cout << "Making frame: " << filename << std::endl;
  SDL_SaveBMP(screen, filename.c_str());
}

void Manager::switchSprite() {
  Player *temp = characters[currentSprite];
  currentSprite = (currentSprite + 1)%characters.size();
  characters[currentSprite]->setPosition(temp->getPosition());
  characters[currentSprite]->setVelocity(temp->getVelocity());
  viewport.setObjectToTrack(characters[currentSprite]);
}

void Manager::update() {
  ++(clock);
  Uint32 ticks = clock.getElapsedTicks();

  static unsigned int lastSeconds = clock.getSeconds();
  if ( clock.getSeconds() - lastSeconds == 5 ) {
    lastSeconds = clock.getSeconds();
    //switchSprite();
  }

  for (unsigned int i = 0; i < sprites.size(); ++i) {
    sprites[i]->update(ticks);
    /*if(Gamedata::getInstance().getXmlStr("tracked")
      .compare(sprites[i]->getName()) == 0){
        TwoWayMultiSprite::setTrackedX(sprites[i]->X());
        TwoWayMultiSprite::getTrackedX();
    }*/
  }
  for(unsigned int i = 0; i < characters.size(); i++){
    characters[i]->update(ticks);
  }

  if ( makeVideo && frameCount < frameMax ) {
    makeFrame();
  }
  world.update();
  world2.update();
  hud.update(clock.getSeconds());
  viewport.update(); // always update viewport last
}

void Manager::play() {
  SDL_Event event;
  bool done = false;

  while ( not done ) {
    while ( SDL_PollEvent(&event) ) {
      Uint8 *keystate = SDL_GetKeyState(NULL);
      if (event.type ==  SDL_QUIT) { done = true; break; }
      if(event.type == SDL_KEYDOWN) {
        if (keystate[SDLK_ESCAPE] || keystate[SDLK_q]) {
          done = true;
          break;
        }
        if ( keystate[SDLK_t] ) {
          	switchSprite();
        }
	if ( keystate[SDLK_w]){
		characters[currentSprite]->moveUp();
	}
	if ( keystate[SDLK_s]){
		characters[currentSprite]->moveDown();
	}
	if ( keystate[SDLK_a]){
		characters[currentSprite]->moveLeft();
	}
	if ( keystate[SDLK_d]){
		characters[currentSprite]->moveRight();
	}
        if ( keystate[SDLK_s] ) {
          clock.toggleSloMo();
        }
        if ( keystate[SDLK_p] ) {
          if ( clock.isPaused() ) clock.unpause();
          else clock.pause();
        }
	if ( keystate[SDLK_F1]){
		Hud::getInstance().setVisible(!Hud::getInstance().isVisible());
	}
        if (keystate[SDLK_F4] && !makeVideo) {
          std::cout << "Making video frames" << std::endl;
          makeVideo = true;
        }
      }

    if(event.type == SDL_KEYUP){

	if ( ! keystate[SDLK_w]){
		characters[currentSprite]->stopUp();
	}
	if ( ! keystate[SDLK_s]){
		characters[currentSprite]->stopDown();
	}
	if ( ! keystate[SDLK_a]){
		characters[currentSprite]->stopLeft();
	}
	if ( ! keystate[SDLK_d]){
		characters[currentSprite]->stopRight();
	}
    }
    }
    draw();
    update();
  }
}
